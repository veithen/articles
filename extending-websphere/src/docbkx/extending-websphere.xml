<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
    <articleinfo>
        <title>Extending WebSphere</title>
        <author><firstname>Andreas</firstname><surname>Veithen</surname></author>
        <releaseinfo>Revision <?eval ${project.version}?></releaseinfo>
    </articleinfo>
    <section>
        <title>Setting up Eclipse</title>
        <para>
            TODO: target platform [Note: workspace scope], JRE, execution environment? [Yes, to make sure that the ant build scripts use the correct Java version]
        </para>
        <figure id="fig-add-installed-jre">
            <title>Adding the WebSphere JDK to Eclipse</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="add-installed-jre.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>
    <section>
        <title>Creating a plug-in for WebSphere</title>
        <para>
            TODO
        </para>
        <procedure>
        
        
            <step>
                <para>
                    Add <literal>com.ibm.wsspi.extension</literal> to the list of required plug-ins.
                    This will allow you to define extensions using the plug-in manifest editor.
                    Of course, if your plug-in doesn't declare any extensions for extension points
                    defined by WebSphere (e.g. if the plug-in is a pure OSGi bundle), then this
                    dependency is not needed.
                </para>
            </step>
        </procedure>
    </section>
    <section>
        <title>Creating a component</title>
        <procedure>
            <step>
                <para>
                    Create a class extending <classname>com.ibm.wsspi.runtime.component.WsComponentImpl</classname>
                    and override one or more of the lifecycle methods as necessary:
                    <methodname>initialize</methodname>, <methodname>start</methodname>, <methodname>stop</methodname>
                    and <methodname>destroy</methodname>.
                </para>
            </step>
        </procedure>
    </section>
    <section>
        <title>Logging and tracing</title>
        <para>
            TODO
        </para>
    </section>
    <section>
        <title>Registering MBeans</title>
        <procedure>
            <step>
                <para>
                    Create an MBean descriptor.
                    The MBean descriptor declares the attributes, operations and notifications of the MBean.
                    The format of the MBean descriptor file is defined by a DTD (<filename>MbeanDescriptor.dtd</filename>) which
                    can be found in the <filename>properties</filename> directory under the
                    root install directory of WebSphere Application Server.
                    The descriptor should have the following document type declaration:
                </para>
                <screen><![CDATA[<!DOCTYPE MBean SYSTEM "MbeanDescriptor.dtd">]]></screen>
                <tip>
                    <para>
                        To allow Eclipse to load the DTD and enable auto-complete, add a suffix entry to the XML catalog, as
                        shown in <xref linkend="fig-mbeandescriptor-catalog"/>.
                    </para>
                    <figure id="fig-mbeandescriptor-catalog">
                        <title>Adding <filename>MbeanDescriptor.dtd</filename> to the XML catalog</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="mbeandescriptor-catalog.png" format="PNG"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </tip>
            </step>
            <step>
                <para>
                    AdminServiceFactory.getMBeanFactory().activateMBean
                    
                    need to create a runtime collaborator
                </para>
                <para>
                    The <methodname>activateMBean</methodname> method takes the following arguments:
                </para>
                <variablelist>
                    <varlistentry>
                        <term><parameter>type</parameter></term>
                        <listitem>
                            <para>
                                TODO: need to be the same as the type attribute on the root element of the descriptor???
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>collaborator</parameter></term>
                        <listitem>
                            <para>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>configId</parameter></term>
                        <listitem>
                            <para>
                                The value of the <literal>mbeanIdentifier</literal> key property in the object name
                                of the MBean.
                                This is only meaningful for MBeans representing resources defined by objects in the WebSphere
                                configuration. E.g. in the object name of an MBean of type <classname>DataSource</classname>, the
                                <literal>mbeanIdentifier</literal> is set to the corresponding configuration object of type <classname>DataSource</classname>.
                                For a custom MBean, there usually is no corresponding configuration object and this parameter
                                should be set to <literal>null</literal>.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>descriptor</parameter></term>
                        <listitem>
                            <para>
                            
                                From the Javadoc: the file name of the MBean XML descriptor file. If null is specified, the default is MBean type.xml.
                            
                            
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>keyProperties</parameter></term>
                        <listitem>
                            <para>
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </step>
            <step>
                <para>
                    Add an extension of type <literal>com.ibm.wsspi.extension.mbean-provider</literal> to the plug-in.
                    This is necessary to let WebSphere now that it has to look for MBean descriptors in the plug-in.
                    If this extension is missing, then <methodname>activateMBean</methodname> will fail with a
                    <classname>java.io.FileNotFoundException</classname>.
                </para>
            </step>
        </procedure>
        <para>
            Further reading:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <ulink url="http://pic.dhe.ibm.com/infocenter/wasinfo/v8r5/topic/com.ibm.websphere.base.doc/ae/tjmx_standard_dynamic_mbean.html"/>
                </para>
            </listitem>
            <listitem>
                <para>
                    <ulink url="http://www.ibm.com/developerworks/websphere/techjournal/0304_williamson/williamson.html"/>
                </para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Implementing process type specific features</title>
        <para>
        
        String processType = AdminServiceFactory.getAdminService().getProcessType();
        if (!(processType.equals("DeploymentManager"))) {
            throw new ComponentDisabledException();
        }
        
        </para>
    </section>
    <section>
        <title>Deploying custom plug-ins to WebSphere</title>
        <para>
            Deploying custom plug-ins to WebSphere involves two steps:
        </para>
        <procedure>
            <step>
                <para>
                    Copy the plug-in JARs to the <filename>plugins</filename> folder in the root directory of the
                    WebSphere installation.
                </para>
                <para>
                    It is possible to do that directly from within Eclipse using
                    <menuchoice><guimenu>Export...</guimenu><guimenuitem>Deployable plug-ins and fragments</guimenuitem></menuchoice>
                    and then choosing the root installation directory as destination.
                    
                    TODO: will not overwrite, but create a new version
                </para>
            </step>
            <step>
                <para>
                    TODO: osgiCfgInit
                </para>
            </step>
        </procedure>
        <para>
            Note that all WebSphere instances belonging to the given installation should be stopped
            while deploying the plug-ins.
        </para>
    </section>
    <section>
        <title>Troubleshooting</title>
        <section>
            <title>Component not loaded</title>
            <procedure>
                <step>
                    <para>
                        Check <filename>SystemOut.log</filename> for WSVR warnings and errors reported by
                        <classname>com.ibm.ws.runtime.provisioning.ComponentMetaDataMgr</classname>.
                        They will be triggered by incorrect extension declarations in <filename>plugin.xml</filename>.
                    </para>
                </step>
            </procedure>
        </section>
    </section>
    <section>
        <title>How to build custom WebSphere plug-ins using Maven and Tycho</title>
        <section>
            <title>Introduction</title>
            <para>
                Beginning with WebSphere 6.1, the application server runtime is actually packaged as a set of OSGi bundles
                running on Eclipse Equinox. This makes it possible to write your own custom plug-ins to extend the server runtime.
                I used that possibility in my <ulink url="http://code.google.com/p/xm4was/">XM4WAS</ulink> project to enhance WebSphere's monitoring capabilities.
            </para>
            <para>
                While the Eclipse IDE is the natural choice to develop this kind of plug-ins, you may still want to automate the build process using Maven.
                The easiest way to set up the Maven build is using <ulink url="http://eclipse.org/tycho/">Tycho</ulink> because it allows Maven to use the
                metadata of the Eclipse project (primarily the bundle manifest). This keeps the amount of configuration required in the POM files small
                and ensures that the artifacts produced by Maven are identical to the ones produced by Eclipse.
            </para>
            <para>
                However, there is an important difference between Maven/Tycho and Eclipse in the way dependencies are resolved:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        To allow Eclipse to resolve dependencies to other WebSphere bundles, you will typically define a target platform
                        that points to the WebSphere installation directory. Eclipse then automatically configures the project dependencies
                        based on the bundle manifest.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Although Tycho also <ulink url="http://wiki.eclipse.org/Tycho/Target_Platform">supports target platform definitions</ulink>,
                        it has an important limitation: <quote>The location types "Directory", "Installation", and "Features" are not supported.</quote>
                        That means that only software sites (i.e. P2 repositories) are supported.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                Since there is no public P2 repository containing the WebSphere bundles, there is no simple way to use a common configuration
                for Eclipse and Maven/Tycho. In the following I will discuss two possible solutions for this problem.
            </para>
        </section>
        <section>
            <title>Importing the WebSphere bundles into the Maven repository</title>
            <para>
                Starting with version 0.6.0, Tycho is able to use OSGi bundles deployed to Maven repositories.
                Therefore one way to let Maven/Tycho resolve WebSphere dependencies is to deploy the bundles to the
                local (or a private/company) Maven repository. Since WebSphere is built on top of an Eclipse runtime, this
                can be easily achieved using the <ulink url="http://maven.apache.org/plugins/maven-eclipse-plugin/to-maven-mojo.html">to-maven</ulink>
                goal of the maven-eclipse-plugin. E.g. the following command will deploy the WebSphere bundles to the local Maven repository:
            </para>
            <screen>mvn eclipse:to-maven -DeclipseDir=/opt/IBM/WebSphere/AppServer</screen>
            <para>
                Unfortunately this is not enough. To resolve dependencies, Tycho uses the information from the project's manifest file.
                The manifest specifies dependencies using bundle symbolic names (Require-Bundle) or package names (Import-Package).
                On the other hand, Maven needs the artifact coordinates (group ID, artifact ID and version) to locate
                an artifact in the repository. The problem is that the eclipse:to-maven goal doesn't produce the necessary metadata
                that would allow Tycho to locate a Maven artifact by exported package.
            </para>
            <para>
                To solve this problem, one has to declare the WebSphere bundles as Maven dependencies in the POM and configure Tycho
                to consider these POM dependencies during calculation of the target platform (by setting the pomDependencies property
                to "consider" in the configuration of the target-platform-configuration plug-in).
            </para>
            <para>
                While this approach looks rather simple at first, it has several important drawbacks:
            </para>
            <orderedlist>
                <listitem>
                    <para>
                        Tycho not only resolves the dependencies needed to build the project, but needs to calculate the entire
                        target platform, i.e. the set of bundles required at runtime. This set includes transitive dependencies
                        and is much larger. Since all of these bundles must be declared in the POM, one typically ends up declaring
                        all WebSphere bundles in the POM and let Tycho choose the ones it really needs.
                        The problem is that the WebSphere runtime has more than 100 bundles...
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The content of the WebSphere bundles may vary between fix packs. A package exported by some bundle in a
                        given fix pack may be exported by a different bundle (typically a new one) in a later fix pack.
                        If one uses Import-Package to specify dependencies, this is not a problem for the Eclipse project.
                        However, for the Maven/Tycho build, all these bundles must also be declared as dependencies in the POM.
                        This implies that the Maven build will only work with a certain range of fix packs and may break if the wrong fix pack is used.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Before it can calculate the target platform, Tycho needs to scan the POM dependencies in order to extract
                        the necessary metadata. Since the WebSphere runtime has more than 100 bundles, some of which are quite large,
                        this has a significant impact on build time. In practice, the impact is so high that the dependency
                        resolution takes more time than the actual build.
                    </para>
                </listitem>
            </orderedlist>
        </section>
        <section>
            <title>Creating a P2 repository from the WebSphere bundles</title>
            <para>
                Another option is to create a P2 repository from the WebSphere bundles and configure that repository in Maven.
                Since P2 repositories contain OSGi specific metadata, Tycho will be able to calculate the target platform without
                the need to declare additional POM dependencies. The Eclipse platform provides a
                <ulink url="http://help.eclipse.org/galileo/topic/org.eclipse.platform.doc.isv/guide/p2_publisher.html">tool</ulink>
                that can be used to create the P2 repository (Note that the tool is not included in WebSphere;
                you need to run the one that comes with the Eclipse IDE). The command looks as follows:
            </para>
            <screen>java -jar plugins/org.eclipse.equinox.launcher_*.jar -application \
org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher \
-metadataRepository file:/was_repo \
-artifactRepository file:/was_repo \
-source /opt/IBM/WebSphere/AppServer -compress -publishArtifacts</screen>
            <para>
                Once this is done, you can set up the repository in Maven:
            </para>
            <programlisting>&lt;repository&gt;
    &lt;id&gt;p2&lt;/id&gt;
    &lt;layout&gt;p2&lt;/layout&gt;
    &lt;url&gt;file:/was_repo&lt;/url&gt;
&lt;/repository&gt;</programlisting>
            <para>
                If each developer is expected to set up his own (local) P2 repository (this would e.g. be the case in
                an Open Source project), then the repository should be configured in <filename>settings.xml</filename>
                (because the repository URL will not be the same for everyone). On the other hand, if you make the
                repository accessible over HTTP (e.g. on a company-wide repository), then you can configure it in the POM.
            </para>
            <para>
                Although the setup is more complicated, the P2 based approach eliminates all the drawbacks encountered with the
                first approach. Nevertheless you need to take into account the following aspects:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        Most packages exported by the WebSphere bundles are not versioned. This means that dependency resolution
                        is only predictable if the P2 repository contains artifacts from a single WebSphere version.
                        This contrasts with the first approach where the WebSphere version is specified in the POM dependencies.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        If all your Maven modules have packaging "eclipse-plugin", then you don't need to declare any POM dependencies.
                        However, you may still have some modules that have packaging "jar", such as modules that execute unit tests
                        (outside of an OSGi container). For these modules, you again need POM dependencies.
                        By convention, Maven artifacts loaded from a P2 repository have "p2.osgi.bundle" as group ID the bundle symbolic name as artifact ID.
                    </para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
</article>
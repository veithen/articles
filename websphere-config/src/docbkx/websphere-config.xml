<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
    <articleinfo>
        <title>Understanding the WebSphere configuration repository</title>
        <releaseinfo>Revision <?eval ${project.version}?></releaseinfo>
    </articleinfo>
    <section>
        <title>Repository structure</title>
        <para>
            At a low level, the WebSphere configuration repository is a collection of folders and documents.
            Although these resources are persisted one-to-one as directories and files under the <filename>config</filename>
            directory in the WebSphere profile, the <firstterm>configuration repository service</firstterm> in WebSphere is more that a simple file
            access service. It allows a client (such as <command>wsadmin</command>) to prepare a set of changes
            in a so called <firstterm>workspace</firstterm><footnote><para>Workspaces are stored in the <filename>wstemp</filename> directory
            in the WebSphere profile.</para></footnote> and to save these changes at once (or to discard the changes
            if something goes wrong). The repository service detects conflicts to prevent clients from attempting
            to modify the same documents concurrently. It also tracks changes so that node agents can incrementally
            replicate the master configuration repository from the deployment manager to individual nodes.
        </para>
        <para>
            The configuration repository is used by WebSphere for various things. E.g. application binaries are stored
            there. However, most of the documents in the repository contain <firstterm>configuration objects</firstterm>.
            To manage this configuration data, WebSphere adds another layer on top of the configuration repository service:
            the <firstterm>config service</firstterm>. The config service uses the following concepts:
        </para>
        <variablelist>
            <varlistentry>
                <term>Repository context</term>
                <listitem>
                    <para>
                        A repository context is a structure that can contain documents and nested repository contexts.
                        Each repository context has a type and a name. Contexts are mapped to two-level folder structures,
                        where the first level identifies the context type and the second level identifies the context name.
                        <xref linkend="fig-contexts-sample"/> shows an example of a repository structure representing
                        two contexts of type <literal>servers</literal>, one named <literal>nodeagent</literal> and
                        one named <literal>server1</literal>.
                    </para>
                    <figure id="fig-contexts-sample">
                        <title>Repository context example</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="contexts.png" format="PNG"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                    <note>
                        <para>
                            TODO: not entirely correct; there are also contexts that have no name and that are mapped to
                            a one-level folder structure.
                        </para>
                    </note>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Document</term>
                <listitem>
                    <para>
                        At the repository level, a document can have any content. The config service on the other hand
                        has a narrower definition of a document, namely an XML file that contains a set of configuration
                        objects in serialized form.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Configuration object</term>
                <listitem>
                    <para>
                        Configuration objects are described using the
                        <ulink url="http://www.eclipse.org/modeling/emf/">Eclipse Modeling Framework</ulink>. 
                    </para>
                    <para>
                        TODO: mention containment relationships
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section>
        <title>Repository metadata</title>
        <para>
            To manage the configuration data, the config service needs metadata that describes the
            supported types of contexts, documents and configuration objects, as well as their relationships.
            This metadata comes from two sources:
        </para>
        <orderedlist>
            <listitem>
                <para>
                    As noted earlier, configuration objects are defined using EMF.
                    In EMF, classes and their relationships are described using <firstterm>Ecore models</firstterm>.
                    Ecore models are conceptually similar to (but simpler than) UML models, and they
                    can be used to generate Java code. The generated code not only contains the Java classes
                    corresponding to the classes defined in the Ecore model, but also code that allows to
                    introspect the model at runtime. This code is contained in implementations of the
                    <classname>org.eclipse.emf.ecore.EPackage</classname> interface.
                    
                    no single EMF model
                    
                </para>
                <para>
                    TODO: Do the plug-ins contain the original ECore files? No.
                </para>
            </listitem>
            <listitem>
                <para>
                    
                </para>
            </listitem>
        </orderedlist>
        <figure>
            <title>Structure of the metadata files in <filename>.repository</filename></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="metadata-schema.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>
        <figure>
            <title>Repository metadata</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="repository-metadata.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>
    <section>
        <title>Configuration IDs</title>
        <para>
            A configuration object is uniquely identified by an identifier with the following structure:
        </para>
        <screen><replaceable>name</replaceable>(<replaceable>context</replaceable>|<replaceable>file</replaceable>#<replaceable>id</replaceable>)</screen>
        <para>
            Example:
        </para>
        <screen>server1(cells/test/nodes/lx03/servers/server1|server.xml#Server_1365407856726)</screen>
    </section>
    <section>
        <title>WebSphere variables</title>
        <para>
            TODO: WIM doesn't use the config service; is that the reason why variable substitution is not working??
        </para>
    </section>
</article>